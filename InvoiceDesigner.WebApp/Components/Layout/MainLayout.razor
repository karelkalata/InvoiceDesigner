@using System.Security.Claims
@using InvoiceDesigner.Localization.Resources
@using Microsoft.Extensions.Localization
@using System.Globalization
@inject IStringLocalizer<Resource> localizer

@inherits LayoutComponentBase

<MudThemeProvider @rendermode="InteractiveServer" />
<MudPopoverProvider @rendermode="InteractiveServer" />
<MudDialogProvider @rendermode="InteractiveServer" />
<MudSnackbarProvider @rendermode="InteractiveServer" />

<MudLayout>
	<MudAppBar Dense>
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(()=> DrawlerToggle())" />
		<MudSpacer />
		<AuthorizeView>
			<Authorized>
				@if (IsAdmin(context.User.Claims.ToList()))
				{
					<MudMenu Class="menu-width" Dense>
						<ActivatorContent>
							<MudChip T="string" Icon="@Icons.Material.Filled.Build" Color="Color.Info">@localizer["Setup"]</MudChip>
						</ActivatorContent>
						<ChildContent>
							<MudNavLink Icon="@Icons.Material.Filled.Groups2" Href="/Companies" Match="NavLinkMatch.Prefix">
								@localizer["Companies"]
							</MudNavLink>
							<MudNavLink Icon="@Icons.Material.Filled.CurrencyExchange" Href="/Currencies" Match="NavLinkMatch.Prefix">
								@localizer["Currencies"]
							</MudNavLink>
							<MudNavLink Icon="@Icons.Material.Filled.SupervisedUserCircle" Href="/Admin/Users" Match="NavLinkMatch.Prefix">
								@localizer["Users"]
							</MudNavLink>
						</ChildContent>
					</MudMenu>
				}
				<MudMenu Class="menu-width" Dense>
					<ActivatorContent>
						<MudChip T="string" Icon="@Icons.Material.Filled.Person" Color="Color.Info">@UserName(context.User.Claims.ToList())</MudChip>
					</ActivatorContent>
					<ChildContent>
						<MudMenuItem Class="pa-0 ma-0">
							<MudNavLink Href="/User/Account" Match="NavLinkMatch.Prefix">
								<MudIcon Icon="@Icons.Material.Filled.ManageAccounts" Size="Size.Small" />
								@localizer["Account"]
							</MudNavLink>
						</MudMenuItem>
						<MudMenuItem Class="pa-0 ma-0">
							<MudNavLink Href="/Logout" Match="NavLinkMatch.Prefix">
								<MudIcon Icon="@Icons.Material.Filled.Logout" Size="Size.Small" />
								@localizer["SignOut"]
							</MudNavLink>
						</MudMenuItem>
					</ChildContent>
				</MudMenu>
			</Authorized>
		</AuthorizeView>
		<MudIconButton Href="https://github.com/karelkalata/InvoiceDesigner" Target="_blank" Icon="@Icons.Material.Filled.ContactSupport" Color="Color.Inherit" Edge="Edge.End" />
	</MudAppBar>
	<MudDrawer @bind-Open="@_drawlerOpen" Elevation="5">
		<AuthorizeView>
			<Authorized>
				<MudNavMenu Bordered="true">
					<MudText Typo="Typo.h6" Class="px-4 pt-2">Invoice Designer</MudText>
					<MudNavLink Icon="@Icons.Material.Filled.House" Href="/" Match="NavLinkMatch.All">Invoices</MudNavLink>
					<MudNavLink Icon="@Icons.Material.Filled.Group" Href="/Customers" Match="NavLinkMatch.Prefix">@localizer["Customers"]</MudNavLink>
					<MudNavLink Icon="@Icons.Material.Filled.ListAlt" Href="/Products" Match="NavLinkMatch.Prefix">@localizer["Products"]</MudNavLink>
					<MudNavLink Icon="@Icons.Material.Filled.DesignServices" Href="/FormDesigner" Match="NavLinkMatch.Prefix">Form Designer</MudNavLink>
				</MudNavMenu>
			</Authorized>
			<NotAuthorized>
				<MudNavMenu Bordered="true">
					<MudText Typo="Typo.h6" Class="px-4 pt-2">Invoice Designer</MudText>
					<MudNavLink Icon="@Icons.Material.Filled.Login" Href="/Login" Match="NavLinkMatch.Prefix">Login</MudNavLink>
				</MudNavMenu>
			</NotAuthorized>
		</AuthorizeView>
	</MudDrawer>
	<MudMainContent>
		@Body
	</MudMainContent>
</MudLayout>

@code
{
	private bool _drawlerOpen = true;

	private void DrawlerToggle()
	{
		_drawlerOpen = !_drawlerOpen;
	}

	private string UserName(List<Claim> claimes)
	{
		return claimes.FirstOrDefault(e => e.Type == "userName")?.Value ?? "error";
	}

	private int UserId(List<Claim> claimes)
	{
		var id = claimes.FirstOrDefault(e => e.Type == "userId");

		if (!int.TryParse(id?.Value, out int result))
			result = 0;

		return result;
	}

	private bool IsAdmin(List<Claim> claimes)
	{
		var isAdmin = claimes.FirstOrDefault(e => e.Type == "isAdmin");
		bool.TryParse(isAdmin?.Value, out bool admin);
		return admin;

	}
}
