@page "/Invoices"
@using InvoiceDesigner.Application.DTOs.Invoice
@using InvoiceDesigner.Application.QueryParameters
@using InvoiceDesigner.Application.Responses
@using InvoiceDesigner.Domain.Shared.Enums
@using InvoiceDesigner.Domain.Shared.QueryParameters

<MudContainer>
	<MudTable ServerData="ServerReload" @ref="_table" Dense Hover RowsPerPage="20">
		<ToolBarContent>
			<MudText Typo="Typo.h6">@localizer[@_controller]</MudText>
			<MudSpacer />
			<MudTextField T="string"
						  ValueChanged="@(s=>OnSearch(s))"
						  Placeholder="@localizer["Search"]"
						  Adornment="Adornment.Start"
						  AdornmentIcon="@Icons.Material.Filled.Search"
						  IconSize="Size.Medium"
						  Class="mt-0" />
			<MudSpacer />
			<MudIconButton Icon="@Icons.Material.Filled.PlaylistAdd" Size="Size.Medium" Href="/Invoices/0" />
			<MudMenu Icon="@Icons.Material.Filled.Settings" Size="Size.Medium" Style="margin-left: auto;" Dense>
				<MudMenuItem>
					<MudCheckBox Dense @bind-Value="_showDeleted" Label="@localizer["ShowDeleted"]" onclick="@(() => OnCheckedShowDeletedChanged())"></MudCheckBox>
				</MudMenuItem>
				<MudMenuItem>
					<MudCheckBox Dense @bind-Value="_showArchived" Label="@localizer["ShowArchived"]" onclick="@(() => OnCheckedShowArchivedChanged())"></MudCheckBox>
				</MudMenuItem>
			</MudMenu>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Id</MudTh>
			<MudTh>Date</MudTh>
			<MudTh>@localizer["Company"]</MudTh>
			<MudTh>@localizer["CustomerId"]</MudTh>
			<MudTh>@localizer["Amount"]</MudTh>
			<MudTh>@localizer["Currency"]</MudTh>
			<MudTh>@localizer["Status"]</MudTh>
			<MudTh></MudTh>

		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Id">
				<MudText>@context.Number</MudText>
			</MudTd>
			<MudTd DataLabel="Date">@context.DateTime.ToString("dd.MM.yyyy")</MudTd>
			<MudTd DataLabel="Comapny">@context.CompanyName</MudTd>
			<MudTd DataLabel="Custome">@context.CustomerName</MudTd>
			<MudTd DataLabel="Amount">

				<MudText>@context.Amount.ToString("N2")</MudText>


			</MudTd>
			<MudTd DataLabel="Currency">@context.CurrencyName</MudTd>
			<MudTd DataLabel="Status">
				<MudSelect T="EStatus" Dense
						   Class="d-flex ma-0"
						   Value="@context.Status"
						   ValueChanged="((e) => OnInvoiceChangeProperty(context.Id, context.IsDeleted, context.IsArchived, e))">
					<MudSelectItem Value="@EStatus.Drafted">@EStatus.Drafted</MudSelectItem>
					<MudSelectItem Value="@EStatus.Approved">@EStatus.Approved</MudSelectItem>
					<MudSelectItem Value="@EStatus.Canceled">@EStatus.Canceled</MudSelectItem>
				</MudSelect>
			</MudTd>

			<MudTd Class="pa-0">
				<div style="display: flex;">
					<MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense Size="Size.Small">

						<MudNavLink Href="@($"/Invoices/{context.Id}")" Class="d-flex flex-nowrap">
							<MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-2" />
							@localizer["Edit"] @localizer["Invoice"] @context.Number
						</MudNavLink>
						<MudDivider />
						<MudNavLink OnClick="() => OnInvoiceChangeProperty(context.Id, context.IsDeleted, !context.IsArchived, context.Status)" Class="d-flex flex-nowrap">
							<MudIcon Icon="@(context.IsArchived? Icons.Material.Outlined.Unarchive : Icons.Material.Filled.Archive)" Class="me-2" />
							Archive/Unarchive
						</MudNavLink>
						<MudNavLink OnClick="() => RedirectToDeleteRow(context.Id)" Class="d-flex flex-nowrap">
							<MudIcon Icon="@(context.IsDeleted? Icons.Material.Filled.DeleteForever : Icons.Material.Filled.Delete)" Class="me-2" />
							@localizer["Delete"]
						</MudNavLink>


					</MudMenu>
					@if (context.IsDeleted)
					{
						<MudBadge Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" Overlap="true" Bordered="true">
							<MudText Style="padding-left: 10px;"></MudText>
						</MudBadge>
					}
					else if (context.IsArchived)
					{
						<MudBadge Icon="@Icons.Material.Filled.Archive" Overlap="true" Bordered="true">
							<MudText Style="padding-left: 10px;"></MudText>
						</MudBadge>
					}
				</div>
			</MudTd>
		</RowTemplate>
		<NoRecordsContent>
			<MudText>@localizer["NoMatchingRecordsFound"]</MudText>
		</NoRecordsContent>
		<LoadingContent>
			<MudText>@localizer["Loading"]</MudText>
		</LoadingContent>
		<PagerContent>
			<MudTablePager PageSizeOptions="new int[] { 10, 20, 30, 40, 50 }" />
		</PagerContent>
	</MudTable>

</MudContainer>

@code {
	private static string _controller = "Invoices";

	private MudTable<InvoicesViewDto> _table = new();
	private ResponsePaged<InvoicesViewDto>? _pagedResult;
	private string _searchString = "";
	private bool _showDeleted = false;
	private bool _showArchived = false;



	private async Task<TableData<InvoicesViewDto>> ServerReload(TableState state, CancellationToken token)
	{
		var queryParameters = new QueryPaged
		{
			PageSize = state.PageSize,
			Page = state.Page + 1,
			SearchString = _searchString,
			SortLabel = "Id_desc",
			ShowDeleted = _showDeleted,
			ShowArchived = _showArchived
		};

		string queryString = queryParameters.ToQueryString();

		_pagedResult = await _httpHelper.GetDataFromAPI<ResponsePaged<InvoicesViewDto>>($"api/Invoices?{queryString}");

		if (_pagedResult != null)
			return new TableData<InvoicesViewDto>()
			{
				TotalItems = _pagedResult.TotalCount,
				Items = _pagedResult.Items
			};

		return new();
	}

	private void OnSearch(string text)
	{
		_searchString = text;
		_table.ReloadServerData();
	}

	private async void RedirectToDeleteRow(int id)
	{
		if (await _httpHelper.DeleteOrMarkAsDeletedAsync($"Invoices/{id}"))
			await _table.ReloadServerData();
	}

	private async Task OnCheckedShowArchivedChanged()
	{
		_showArchived = !_showArchived;
		await _table.ReloadServerData();
	}

	private async Task OnCheckedShowDeletedChanged()
	{
		_showDeleted = !_showDeleted;
		await _table.ReloadServerData();
	}

	private async Task OnInvoiceChangeProperty(int id, bool isDeleted, bool isArchived, EStatus status)
	{
		var queryChangeProperty = new QueryChangeProperty
		{
			EntityId = id,
			IsDeleted = isDeleted,
			IsArchived = isArchived,
			Status = status
		};
		string queryString = queryChangeProperty.ToQueryString();

		var result = await _httpHelper.GetDataFromAPI<ResponseBoolean>($"api/Invoices/InvoiceChangeProperty?{queryString}");
		if (result.Result)
			await _table.ReloadServerData();
	}


}