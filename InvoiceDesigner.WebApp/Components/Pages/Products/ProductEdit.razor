@page "/Products/{id:int}"
@using InvoiceDesigner.Application.DTOs.Currency
@using InvoiceDesigner.Application.DTOs.Product
@using InvoiceDesigner.Domain.Shared.Interfaces.Abstract
@using InvoiceDesigner.Domain.Shared.Models


<MudContainer>
	@if (_productEditDto == null)
	{
		<MudOverlay Visible="true">
			<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
		</MudOverlay>
	}
	else
	{
		<EditForm Model="@_productEditDto" OnValidSubmit="OnValidSubmit" Context="contextForm">
			<DataAnnotationsValidator />
			<MudCard>
				<MudCardContent>
					<MudTextField Class="pa-2"
								  @bind-Value="_productEditDto.Name"
								  Label="@localizer["Name"]"
								  For="(() => _productEditDto.Name)" />
					<MudDataGrid Class="pa-2" Dense Hover Striped
								 T="ProductPriceEditDto"
								 @ref="dataGrid"
								 @bind-SelectedItems="selectedItems"
								 Items="_productEditDto.ProductPrice"
								 SortMode="SortMode.None"
								 ReadOnly="false"
								 EditMode="DataGridEditMode.Cell"
								 EditTrigger="DataGridEditTrigger.Manual">
						<ColGroup>
							<col style="width: auto;" />
							<col style="width: auto;" />
						</ColGroup>
						<Columns>
							<SelectColumn />
							<PropertyColumn Property="x => x.Currency" Title="@localizer["Currency"]">
								<EditTemplate>
									<MudAutocomplete T="CurrencyAutocompleteDto" Required Dense Clearable
													 Value="context.Item.Currency"
													 ValueChanged="@(currency => OnCurrencySelected(currency, context.Item))"
													 Placeholder="@localizer["Currency"]"
													 SearchFunc="@((value, token) => FilteringDataWithApi<CurrencyAutocompleteDto>(value, "UserCurrencies", token))"
													 ToStringFunc="@(c => c?.Name ?? "")"
													 For="(() => context.Item.Currency)" />
								</EditTemplate>
							</PropertyColumn>

							<PropertyColumn Property="x => x.Price" Title="@localizer["Price"]">
								<EditTemplate>
									<MudNumericField @bind-Value="context.Item.Price"/>
								</EditTemplate>
							</PropertyColumn>

						</Columns>
						<NoRecordsContent>
							<MudText>@localizer["NoMatchingRecordsFound"]</MudText>
						</NoRecordsContent>
					</MudDataGrid>
				</MudCardContent>
				<MudCardActions>
					<MudButton Size="Size.Small"
							   StartIcon="@Icons.Material.Filled.AddCircle"
							   OnClick="AddInvoiceItems">
						<MudText>
							@localizer["AddPrice"]
						</MudText>
					</MudButton>
					<MudButton Size="Size.Small"
							   StartIcon="@Icons.Material.Filled.DeleteForever"
							   Disabled="@(selectedItems.Count == 0)"
							   OnClick="DeleteSelectedItems">
						<MudText>
							@localizer["DeletePrice"]
						</MudText>
					</MudButton>
					<MudButton Size="Size.Small" Class="ml-auto"
							   Variant="Variant.Filled"
							   Color="Color.Primary"
							   ButtonType="ButtonType.Submit">
						@localizer["Save"]
					</MudButton>
				</MudCardActions>
			</MudCard>
		</EditForm>
	}
</MudContainer>
@code {
	[Parameter]
	public int? id { get; set; }

	private MudDataGrid<ProductPriceEditDto> dataGrid = new();
	private List<CurrencyAutocompleteDto> _selectedCurrencies = new();
	private HashSet<ProductPriceEditDto> selectedItems = new();

	private ProductEditDto? _productEditDto = new ProductEditDto();

	protected override async Task OnInitializedAsync()
	{
		if (id.HasValue && id > 0)
			_productEditDto = await _httpHelper.GetAsync<ProductEditDto>($"Products/{id}");

		if (_productEditDto != null)
		{
			_selectedCurrencies.AddRange(
				_productEditDto.ProductPrice
					.Select(a => a.Currency)
					.Where(currency => currency != null)
					.Distinct()
			);
		}
	}


	private void AddInvoiceItems()
	{
		_productEditDto?.ProductPrice.Add(new ProductPriceEditDto());
	}

	private void OnCurrencySelected(CurrencyAutocompleteDto selectedCurrency, ProductPriceEditDto item)
	{
		if (!_selectedCurrencies.Contains(selectedCurrency))
		{
			_selectedCurrencies.Add(selectedCurrency);
			item.Currency = selectedCurrency;
		}
	}

	private void DeleteSelectedItems()
	{
		foreach (var item in selectedItems.ToList())
		{
			_selectedCurrencies.Remove(item.Currency);
			_productEditDto?.ProductPrice.Remove(item);
			selectedItems.Clear();
			StateHasChanged();
		}
	}

	private async Task OnValidSubmit()
	{
		await _httpHelper.SendRequest("Products", _productEditDto, id.HasValue && id > 0);
	}


	private async Task<IEnumerable<T>> FilteringDataWithApi<T>(string value, string apiUrl, CancellationToken token) where T : IHasIdAndName
	{
		var allResults = await _httpHelper.GetDataFromAPI<IEnumerable<T>>($"api/{apiUrl}/FilteringData?f={value}");

		var filteredResults = allResults.Cast<CurrencyAutocompleteDto>()
			.Where(result => !_selectedCurrencies.Any(selected => selected.Id == result.Id))
			.Cast<T>();

		return filteredResults;

	}

}
