@page "/Customers/{id:int}"
@using InvoiceDesigner.Application.DTOs.Customer


<MudContainer>
	@if (_customerEditDto == null)
	{
		<MudOverlay Visible="true">
			<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
		</MudOverlay>
	}
	else
	{
		<EditForm Model="@_customerEditDto" OnValidSubmit="OnValidSubmit">
			<DataAnnotationsValidator />
			<MudCard>
				<MudCardContent>
					<MudTextField @bind-Value="_customerEditDto.Name"
								  Label="@localizer["Name"]"
								  For="(() => _customerEditDto.Name)" />
					<MudTextField @bind-Value="_customerEditDto.TaxId"
								  Label="@localizer["TaxId"]"
								  For="(() => _customerEditDto.TaxId)" />
					<MudTextField @bind-Value="_customerEditDto.VatId"
								  Label="@localizer["VatId"]"
								  For="(() => _customerEditDto.VatId)" />
				</MudCardContent>
				<MudCardActions>
					<MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="ml-auto">
						@localizer["Save"]
					</MudButton>
				</MudCardActions>
			</MudCard>
		</EditForm>
	}
</MudContainer>
@code {
	[Parameter]
	public int? id { get; set; }

	private CustomerEditDto? _customerEditDto = new CustomerEditDto();

	protected override async Task OnInitializedAsync()
	{
		if (id.HasValue && id > 0)
		_customerEditDto = await _httpHelper.GetAsync<CustomerEditDto>($"Customers/{id}");
	}

	private async Task OnValidSubmit()
	{
		await _httpHelper.SendRequest("Customers", _customerEditDto, id.HasValue && id > 0);
	}
}
