@page "/FormDesigner"
@using InvoiceDesigner.Application.DTOs.DtoFormDesigners
@using InvoiceDesigner.Domain.Shared.Enums
@using InvoiceDesigner.Application.Helpers
@using InvoiceDesigner.Domain.Shared.Interfaces.Abstract
@using InvoiceDesigner.Domain.Shared.Models.ModelsFormDesigner
@using InvoiceDesigner.Application.QueryParameters
@using InvoiceDesigner.Application.Responses
@using System.Diagnostics
@using InvoiceDesigner.Domain.Shared.QueryParameters
@using InvoiceDesigner.WebApp.Components.Pages.Dialogs

@inject IJSRuntime JS

<style>
	.border-my-05 {
		border-width: 0.5px;
		border-color: rgba(0,0,255,0.05);
	}

	.mud-drop-item {
		width: 100%;
	}

	.mud-expand-panel .mud-expand-panel-content.mud-expand-panel-gutters {
		padding-left: 2px;
		padding-right: 2px;
	}

	.mud-expand-panel .mud-expand-panel-header {
		padding: 5px 10px 5px 10px;
	}

	.opacity-toggle {
		opacity: 0.1
	}

		.opacity-toggle:hover {
			opacity: 1.0
		}
</style>

@if (!_loaded)
{
	<MudOverlay Visible="true">
		<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
	</MudOverlay>
}
else
{
	<MudContainer Class="ma-3 pa-3">
		<MudDropContainer T="DropItemEditDto" Class="d-flex flex-wrap flex-grow-1"
						  ItemDropped="ItemUpdated"
						  @ref="_mudDropContainerRef"
						  Items="_formDesigner.DropItems"
						  ItemDisabled="@(item => item.StartSelector == "_Hidden")"
						  NoDropClass="mud-border-error"
						  ItemsSelector="@((item, dropzone) => item.Selector == dropzone)">
			<ChildContent>
				<MudGrid>
					<MudItem xs="3">
						<MudCard>
							<MudCardHeader>
								<MudGrid>
									<MudItem xs="12" Class="d-flex align-items-center">
										<MudIconButton Variant="Variant.Filled" Class="ma-1"
													   OnClick="OpenNewFormDesignerDialog"
													   Size="Size.Small"
													   Icon="@Icons.Material.Filled.Add"
													   Color="Color.Default">
										</MudIconButton>
										<MudButton Variant="Variant.Filled" Class="ma-1"
												   OnClick="GetFilePDF"
												   Disabled="@(_id==0)"
												   Size="Size.Small"
												   StartIcon="@Icons.Material.Filled.Download"
												   Color="Color.Primary">
											@localizer["Test"]
										</MudButton>
										<MudButton Variant="Variant.Filled" Class="ma-1"
												   Disabled="@(_id==0)"
												   OnClick="OnValidSubmit"
												   Size="Size.Small"
												   StartIcon="@Icons.Material.Filled.Save"
												   Color="Color.Primary">
											@localizer["Save"]
										</MudButton>
									</MudItem>

									<MudItem xs="12">
										<MudSelect T="EAccountingDocument" Dense
												   Typo="Typo.inherit"
												   Value="_accountingDocument"
												   ValueChanged="OnAccountingDocumentChanged"
												   Variant="Variant.Outlined">
											<MudSelectItem value="@EAccountingDocument.Invoice">@EAccountingDocument.Invoice</MudSelectItem>
											@*
											@foreach (var value in Enum.GetValues(typeof(EAccountingDocument)).Cast<EAccountingDocument>())
											{
												<MudSelectItem value="@value">@value</MudSelectItem>
											}
											*@
										</MudSelect>

									</MudItem>
									<MudItem xs="12">
										<MudAutocomplete T="FormDesignersAutocompleteDto" Required Dense Clearable
														 Value="_selectedDesignersAutocompleteDto"
														 ValueChanged="OnFormDesignersAutocompleteDtoChanged"
														 Label="@localizer["SelectPDFForm"]"
														 Typo="Typo.inherit"
														 SearchFunc="@((value, token) => FilteringDataWithApi<FormDesignersAutocompleteDto>(value, "FormDesigner", token))"
														 ToStringFunc="@(c => c?.Name ?? "")" />
									</MudItem>
								</MudGrid>


							</MudCardHeader>

							<MudCardContent>
								<MudExpansionPanels>
									<MudExpansionPanel Text="@localizer["General"]" Expanded="true">
										<MudDropZone T="DropItemEditDto" Identifier="_Invoice" Class="rounded mud-background-gray pa-1 ma-0 flex-grow-1" />
									</MudExpansionPanel>
									<MudExpansionPanel Text="@localizer["Company"]">
										<MudDropZone T="DropItemEditDto" Identifier="_Company" Class="rounded mud-background-gray pa-1 ma-0 flex-grow-1" />
									</MudExpansionPanel>
									<MudExpansionPanel Text="@localizer["Currency"]">
										<MudDropZone T="DropItemEditDto" Identifier="_Currency" Class="rounded mud-background-gray pa-1 ma-0 flex-grow-1" />
									</MudExpansionPanel>
									<MudExpansionPanel Text="@localizer["Bank"]">
										<MudDropZone T="DropItemEditDto" Identifier="_Bank" Class="rounded mud-background-gray pa-1 ma-0 flex-grow-1" />
									</MudExpansionPanel>
									<MudExpansionPanel Text="@localizer["Customer"]">
										<MudDropZone T="DropItemEditDto" Identifier="_Customer" Class="rounded mud-background-gray pa-1 ma-0 flex-grow-1" />
									</MudExpansionPanel>
									<MudExpansionPanel Text="Other">
										<MudButton Variant="Variant.Filled" FullWidth
												   Disabled="_formDesigner.DropItems.Count == 0"
												   OnClick="AddEmptyBox"
												   Size="Size.Small"
												   StartIcon="@Icons.Material.Outlined.AddBox"
												   Color="Color.Secondary">
											@localizer["AddEmptyBox"]
										</MudButton>

										<MudDropZone T="DropItemEditDto" Identifier="_Other" Class="rounded mud-background-gray pa-1 ma-0 flex-grow-1" />
									</MudExpansionPanel>
									<MudExpansionPanel Text="Action">
										<MudButton Variant="Variant.Filled" Class="ma-1"
												   Disabled="_id==0"
												   OnClick="RedirectToDeleteRow"
												   Size="Size.Small"
												   StartIcon="@Icons.Material.Filled.DeleteForever"
												   Color="Color.Error">
											@localizer["Delete"]
										</MudButton>
									</MudExpansionPanel>
								</MudExpansionPanels>

							</MudCardContent>

						</MudCard>

					</MudItem>

					<MudItem xs="9">
						@for (int r = 0; r < _formDesigner.Schemes.Count; r++)
						{
							var row = r.ToString();
							var currentRow = r;
							<div class="d-flex">
								@for (int c = 0; c <= _formDesigner.Schemes[r].Column; c++)
								{
									var col = c.ToString();
									var identifier = $"coor_{row}_{col}";
									<MudDropZone T="DropItemEditDto"
												 Identifier=@identifier
												 CanDrop="@(item => !_dropItemsEditDto.Any(x => x.Selector == identifier))"
												 DraggingClass="mud-theme-success"
												 Class="d-flex justify-center align-center border-my-05 "
												 Style="height: 25px; width: 900px;" />

								}
								<div class="d-flex opacity-toggle">
									<MudMenu Icon="@Icons.Material.Filled.Settings" Size="Size.Small" Style="height: 25px; margin-left: auto;" Dense>

										<MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.Add" OnClick="@(() => AddColumn(currentRow))">Column</MudMenuItem>
										<MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.Remove" OnClick="@(()=> RemoveColumn(currentRow))">Column</MudMenuItem>

									</MudMenu>
								</div>
							</div>
						}
					</MudItem>

				</MudGrid>
			</ChildContent>

			<ItemRenderer>
				@if (context.Selector.StartsWith("_"))
				{
					<MudPaper Class="pa-1 my-1">
						<MudText Typo="Typo.caption">
							@context.Value
						</MudText>
					</MudPaper>
				}
				else
				{
					<MudPaper Class="pa-1 my-1 docs-gray-bg my-page-dropzone" Style="height: 25px; display: flex; align-items: center;">
						<MudText Typo="Typo.caption" Style=@GetCssStyle(context)>
							@context.Value
						</MudText>

						<MudMenu Icon="@Icons.Material.Filled.Settings" Size="Size.Small" Style="margin-left: auto;" Dense>

							<MudMenuItem IconSize="Size.Small" Icon="@Icons.Material.Filled.Edit" @onclick="() => EditDropItemValue(context)">Edit</MudMenuItem>

							<MudMenuItem>
								<MudStack Row="true" Spacing="2">
									<MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.FormatAlignLeft" @onclick="() => SetCssStyle(context, ConstsCssProperty.TextAlign, ConstsCssProperty.Value_Left)" />
									<MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.FormatAlignCenter" @onclick="() => SetCssStyle(context, ConstsCssProperty.TextAlign, ConstsCssProperty.Value_Center)" />
									<MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.FormatAlignRight" @onclick="() => SetCssStyle(context, ConstsCssProperty.TextAlign, ConstsCssProperty.Value_Right)" />
								</MudStack>
							</MudMenuItem>
							<MudMenuItem>
								<MudStack Row="true" Spacing="2">
									<MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.FormatBold" @onclick="() => SetCssStyle(context, ConstsCssProperty.FontWight, ConstsCssProperty.Value_Bold)" />
									<MudIconButton Size="Size.Small" Color="Color.Primary" Icon="@Icons.Material.Filled.FormatItalic" @onclick="() => SetCssStyle(context, ConstsCssProperty.FontStyle, ConstsCssProperty.Value_Italic)" />
								</MudStack>
							</MudMenuItem>

						</MudMenu>
					</MudPaper>
				}
			</ItemRenderer>

		</MudDropContainer>


	</MudContainer>



	<script>
		function openPdf(pdfDataUrl) {
		if (pdfDataUrl) {
		window.open(pdfDataUrl, '_blank');
		}
		}
	</script>
}



@code {
	private int _id;

	private List<DropItemEditDto> _dropItemsEditDto = new();
	private MudDropContainer<DropItemEditDto> _mudDropContainerRef { get; set; } = new();
	private List<FormDesignersAutocompleteDto> _formDesignersAutocompleteDto = new();
	private List<FormDesignersAutocompleteDto> _listForms = new();
	private FormDesignersAutocompleteDto _selectedDesignersAutocompleteDto = null!;
	private bool _loaded;
	private FormDesignerEditDto _formDesigner = new();
	private EAccountingDocument _accountingDocument;

	protected override async Task OnInitializedAsync()
	{
		_formDesignersAutocompleteDto = await _httpHelper.GetDataFromAPI<List<FormDesignersAutocompleteDto>>($"api/FormDesigner/GetAllAutocompleteDto");
		OnAccountingDocumentChanged(EAccountingDocument.Invoice);   // Default First
		_loaded = true;
	}

	#region Select Forms
	private void OnAccountingDocumentChanged(EAccountingDocument accountingDocument)
	{
		_accountingDocument = accountingDocument;
		_id = 0;
		_selectedDesignersAutocompleteDto = null!;
		_dropItemsEditDto = new();
		_listForms = _formDesignersAutocompleteDto
			.Where(e => e.AccountingDocument == accountingDocument)
			.ToList();

		_mudDropContainerRef.Refresh();
		StateHasChanged();
	}

	private Task<IEnumerable<T>> SearchElements<T>(string value, IEnumerable<T> items, CancellationToken token) where T : IHasIdAndName
	{

		if (string.IsNullOrEmpty(value))
			return Task.FromResult(items.AsEnumerable());

		return Task.FromResult(items
						.Where(c => c.Name.Contains(value, StringComparison.OrdinalIgnoreCase))
						.AsEnumerable());
	}
	#endregion

	private void AddColumn(int row)
	{
		if (_formDesigner.Schemes[row].Column == 10)
			return;

		_formDesigner.Schemes[row].Column++;
		StateHasChanged();
	}

	private void RemoveColumn(int row)
	{
		var column = _formDesigner.Schemes[row].Column;
		if (column == 0)
			return;

		_formDesigner.Schemes[row].Column = column - 1;

		var removeDropItem = _formDesigner.DropItems.FirstOrDefault(e => e.Selector == $"coor_{row}_{column}");
		if (removeDropItem != null)
			removeDropItem.Selector = removeDropItem.StartSelector;

		StateHasChanged();
	}

	private async Task GetFilePDF()
	{
		var PdfGuid = await _httpHelper.GetDataFromAPI<ResponsePdfGuid>($"api/PrintInvoice?id=0&PrintFormId={_id}");
		var client = await _httpHelper.CreateHttpClient();
		await JS.InvokeVoidAsync("open", $"{client?.BaseAddress?.ToString()}api/PrintInvoice/{PdfGuid.Guid}", "_blank");
	}

	private async Task LoadForm(int id)
	{
		_loaded = false;
		_formDesigner = await _httpHelper.GetDataFromAPI<FormDesignerEditDto>($"/api/FormDesigner/{id}");
		_mudDropContainerRef.Refresh();
		StateHasChanged();
		_loaded = true;
	}

	private async Task AddEmptyBox()
	{
		var newEmptyBox = await _httpHelper.GetDataFromAPI<DropItemEditDto>($"/api/FormDesigner/AddEmptyBox");
		_formDesigner.DropItems.Add(newEmptyBox);
		_mudDropContainerRef.Refresh();
	}

	private async Task OnFormDesignersAutocompleteDtoChanged(FormDesignersAutocompleteDto formDesignersAutocompleteDto)
	{
		_selectedDesignersAutocompleteDto = formDesignersAutocompleteDto;
		if (_selectedDesignersAutocompleteDto != null)
		{
			_id = formDesignersAutocompleteDto.Id;
			await LoadForm(_id);
		}
	}

	private async Task OpenNewFormDesignerDialog()
	{
		var newFormDesigner = new FormDesignerEditDto
			{
				AccountingDocument = _accountingDocument,
				PageMargin = 10
			};

		var options = new DialogOptions { CloseOnEscapeKey = true };
		var parameters = new DialogParameters<NewFormDesigner_dialog>
		{
			{ x => x.Dto, newFormDesigner }
		};
		var dialog = await DialogService.ShowAsync<NewFormDesigner_dialog>($"new PDF for {_accountingDocument}", parameters, options);
		var result = await dialog.Result;

		if (result != null && !result.Canceled && result.Data is FormDesignerEditDto dto)
		{
			_formDesigner = dto;
			await OnValidSubmit();

			_formDesignersAutocompleteDto = await _httpHelper.GetDataFromAPI<List<FormDesignersAutocompleteDto>>($"api/FormDesigner/GetAllAutocompleteDto");
			_selectedDesignersAutocompleteDto = _formDesignersAutocompleteDto.Last();

			await LoadForm(_selectedDesignersAutocompleteDto.Id);
		}
	}

	private string GetCssStyle(DropItemEditDto dropItem)
	{
		var cssString = string.Join("; ", dropItem.CssStyleEditDto.Select(s => $"{s.Name}: {s.Value}")) + ";";
		return cssString;
	}

	private void SetCssStyle(DropItemEditDto dropItem, string name, string value)
	{
		var css = dropItem.CssStyleEditDto.FirstOrDefault(e => e.Name == name);
		if (css != null)
		{
			switch (css.Name)
			{
				case ConstsCssProperty.FontWight:
				case ConstsCssProperty.FontStyle:
					css.Value = css.Value == value ? ConstsCssProperty.Value_Normal : value;
					break;
				default:
					css.Value = value;
					break;
			}

		}

		_mudDropContainerRef.Refresh();
	}

	private async Task EditDropItemValue(DropItemEditDto dropItem)
	{
		var parameters = new DialogParameters<InputDescription> { { x => x.DropItemEditDto, dropItem } };

		IDialogReference dialog;

		if (dropItem.Value == "{Invoice.InvoiceItems}")
		{
			dialog = await DialogService.ShowAsync<InvoiceItemsProperties_dialog>(string.Empty, parameters);
		}
		else
		{
			dialog = await DialogService.ShowAsync<InputDescription>(string.Empty, parameters);
		}

		var result = await dialog.Result;

		if (result != null && !result.Canceled)
		{
			_mudDropContainerRef.Refresh();
			await OnValidSubmit();
		}
	}

	private void ItemUpdated(MudItemDropInfo<DropItemEditDto> dropItem)
	{
		if (dropItem.Item == null)
			return;

		if (dropItem.DropzoneIdentifier.StartsWith("coor_"))
		{
			dropItem.Item.Selector = dropItem.DropzoneIdentifier;
		}
		else
		{
			dropItem.Item.Selector = dropItem.Item.StartSelector;
		}
	}

	private async void RedirectToDeleteRow()
	{
		if (await _httpHelper.DeleteWithConfirmationAsync($"FormDesigner/{_id}"))
		{
			_formDesignersAutocompleteDto = await _httpHelper.GetDataFromAPI<List<FormDesignersAutocompleteDto>>($"api/FormDesigner/GetAllAutocompleteDto");
			_selectedDesignersAutocompleteDto = null!;
			_dropItemsEditDto = new();
			_formDesigner = new();
			_id = 0;
			StateHasChanged();
		}
	}

	private async Task OnValidSubmit()
	{
		_id = await _httpHelper.SendRequest("FormDesigner", _formDesigner, _id > 0) ?? 0;
	}

	private class ErrorResponse
	{
		public string? Message { get; set; }
		public object? errors { get; set; }
	}

	private async Task<IEnumerable<T>> FilteringDataWithApi<T>(string value, string apiUrl, CancellationToken token) where T : IHasIdAndName
	{
		var queryParameters = new QueryFiltering
			{
				AccountingDocument = _accountingDocument,
				SearchString = value
			};
		string queryString = queryParameters.ToQueryString();

		return await _httpHelper.GetDataFromAPI<IEnumerable<T>>($"api/{apiUrl}/FilteringData?{queryString}");
	}

}
