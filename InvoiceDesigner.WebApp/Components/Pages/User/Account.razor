@page "/User/Account"
@using InvoiceDesigner.Application.DTOs.User
@using InvoiceDesigner.Localization

<MudContainer>
	@if (_userEditDto == null)
	{
		<MudOverlay Visible="true">
			<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
		</MudOverlay>
	}
	else
	{
		<EditForm Model="@_userEditDto" OnValidSubmit="OnValidSubmit">
			<DataAnnotationsValidator />
			<MudCard>
				<MudCardContent>
					<MudPaper Class="pa-4">
						<MudTextField @bind-Value="_userEditDto.Name" Required
									  Label="@localizer["FullName"]"
									  Class="d-flex pa-2"
									  For="(() => _userEditDto.Name)" />
						<MudTextField @bind-Value="_userEditDto.Password"
									  Label="@localizer["Password"]"
									  Class="d-flex pa-2"
									  For="(() => _userEditDto.Password)" />
						<MudSelect T="string"
								   Class="d-flex pa-2"
								   Label="@localizer["Language"]"
								   @bind-Value="_userEditDto.Locale">
							@foreach (var culture in Locale.SupportedCultures)
							{
								<MudSelectItem Value="@culture.ToString()">@culture.NativeName</MudSelectItem>
							}

						</MudSelect>
					</MudPaper>
				</MudCardContent>
				<MudCardActions>
					<MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="ml-auto">
						@localizer["Save"]
					</MudButton>
				</MudCardActions>
			</MudCard>
		</EditForm>
	}
</MudContainer>
@code {
	private UserEditDto? _userEditDto = null;

	protected override async Task OnInitializedAsync()
	{
		_userEditDto = await _httpHelper.GetAsync<UserEditDto>($"User/Account");
	}

	private async Task OnValidSubmit()
	{
		if (_userEditDto == null)
			return;

		await _httpHelper.SendRequest("User/Account", _userEditDto, true);
	}

}
