@page "/Currencies/{id:int}"
@using InvoiceDesigner.Application.DTOs.Currency

@if (_currencyEditDto == null)
{
	<MudOverlay Visible="true">
		<MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
	</MudOverlay>
}
else
{
	<MudContainer>
		<EditForm Model="@_currencyEditDto" OnValidSubmit="OnValidSubmit">
			<DataAnnotationsValidator />
			<MudCard>
				<MudCardContent>
					<MudTextField @bind-Value="_currencyEditDto.Name"
								  Label="@localizer["CurrencyCode"]"
								  For="(() => _currencyEditDto.Name)" />
					<MudTextField @bind-Value="_currencyEditDto.Description"
								  Label="@localizer["Description"]"
								  For="(() => _currencyEditDto.Description)" />
				</MudCardContent>
				<MudCardActions>
					<MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="ml-auto">@localizer["Save"]</MudButton>
				</MudCardActions>
			</MudCard>
		</EditForm>
	</MudContainer>
}

@code {
	[Parameter]
	public int? id { get; set; }

	private CurrencyEditDto? _currencyEditDto = new CurrencyEditDto();

	protected override async Task OnInitializedAsync()
	{
		if (id.HasValue && id > 0)
			_currencyEditDto = await _httpHelper.GetAsync<CurrencyEditDto>($"Currencies/{id}");
	}

	private async Task OnValidSubmit()
	{
		await _httpHelper.SendRequest("Currencies", _currencyEditDto, id.HasValue && id > 0);
	}


}
